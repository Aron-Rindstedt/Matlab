function [L2norm,v,mov] = inter2D(boundType,stepType,testType,N)

%%%%% Setup
% boundType = 0; %0=Neumann, 1=Dirichlet
% stepType = 0;  %0=RK4, 1=2nd order stepping
%N = 100;
%CFL = 0;

    movTime = 2;
    L2Test=0;
    eigTest=0;
    errTest=0;
    tEnd = 2*pi;
    switch testType
      case 1
        eigTest=1;
      case 2
        L2Test=1;
        tEnd=1;
      case 3
        errTest=1;
      case 4
        movTime=0;
      case 5
        tEnd=pi/10;
        movTime=0;
    end
    
    u_x = 4;
    v_x = 5;
    u_y = 3;
    v_y = 2;
    u_t = sqrt(u_x^2+u_y^2);
    
    function out = f(x,y,t)
        out = kron(sin(u_x*x+v_x),sin(u_y*y+v_y))*cos(u_t*t);
    end
    function out = f_x(x,y,t)
        out = kron(u_x*cos(u_x*x+v_x),sin(u_y*y+v_y))*cos(u_t*t);
    end
    function out = f_y(x,y,t)
        out = kron(sin(u_x*x+v_x),u_y*cos(u_y*y+v_y))*cos(u_t*t);
    end
    function out = f_t(x,y,t)
        out = kron(sin(u_x*x+v_x),sin(u_y*y+v_y))*-u_t*sin(u_t*t);
    end
    
    CFL = 30;  %Quick-n-dirty CFL-numbers. Probably won't work if
               %b,c ~= 1
    movN = movTime*30; 

    t = 0;

    xmin = 0;
    xmid = pi;
    xmax = 2*pi;

    ymin = 0;
    ymax = pi;

    x1 = linspace(xmin,xmid, N+1)';
    x2 = linspace(xmid,xmax, N+1)';
    y  = linspace(ymin,ymax, N+1)';
    h = x1(2)-x1(1);
    
    dt = h/CFL;
    M = ceil(tEnd/dt);
    dt = tEnd/M;

    v = 0;
    v_prev = 0;
    if stepType==0
        v = [f(x1,y,t); f(x2,y,t); f_t(x1,y,t); f_t(x2,y,t)];
    end
    if stepType==1
        v = [f(x1,y,t); f(x2,y,t)];
        v_prev = [f(x1,y,t-dt); f(x2,y,t-dt)];
    end
    
    function out = b1(x)
        out = ones(size(x));
    end
    
    function out = b2(x)
        out = ones(size(x));
    end

    function out = c1(y)
        out = ones(size(y));
    end
    function out = c2(y)
        out = ones(size(y));
    end
    
    %%Autogenerated boundaries
    function out = N_g0(y,t)
        out = f_x(xmin,y,t);
    end
    function out = N_g1(y,t)
        out = f_x(xmax,y,t);
    end
    function out = N_g2(x,t)
        out = f_y(x,ymin,t);
    end
    function out = N_g3(x,t)
        out = f_y(x,ymax,t);
    end
    
    function out = D_g0(y,t)
        out = f(xmin,y,t);
    end
    function out = D_g1(y,t)
        out = f(xmax,y,t);
    end
    function out = D_g2(x,t)
        out = f(x,ymin,t);
    end
    function out = D_g3(x,t)
        out = f(x,ymax,t);
    end
    
    if boundType==0
        g0 = @N_g0;
        g1 = @N_g1;
        g21 = @N_g2;
        g22 = @N_g2;
        g31 = @N_g3;
        g32 = @N_g3;
    end
    
    if boundType==1
        g0 = @D_g0;
        g1 = @D_g1;
        g21 = @D_g2;
        g22 = @D_g2;
        g31 = @D_g3;
        g32 = @D_g3;
    end
    
    bigN = (N+1)^2;
    bigbigN = 2*bigN;
    
    mov = zeros(bigbigN,movN);
    movT = 0;
    movDt = tEnd/movN;
    movK = 1;
    
    gamma = 5; %Dirichlet tuning variable

    %%%%% Operator creation
    %alph = 0.2508560249; %For fourth-order operators
    alph = 0.1878715026;  %For sixth-order operators
    I = sparse(eye(N+1));
    [HI,~,D2x1,BSx1] = HOM6_D_VAR_NARROW(N+1,h,b1(x1));
    [~ ,~,D2x2,BSx2] = HOM6_D_VAR_NARROW(N+1,h,b2(x2));
    [~ ,~,D2y1,BSy1] = HOM6_D_VAR_NARROW(N+1,h,c1(y ));
    [~ ,~,D2y2,BSy2] = HOM6_D_VAR_NARROW(N+1,h,c2(y ));
    % [H,~,D2,BS] = SBP8(N+1,h);
    % HI = inv(H);
    HI = sparse(HI);
    e0 = sparse(  1,1,1,N+1,1);
    eN = sparse(N+1,1,1,N+1,1);
    He0 = HI*e0;
    HeN = HI*eN;
    big0 = sparse(bigN,bigN);
    
    %Extra pieces for prim1 and bis1
    bigHIx = kron(HI,I);
    bigbigHIx = [bigHIx big0; big0 bigHIx];
    bigHIy = kron(I,HI);
    bigbigHIy = [bigHIy big0; big0 bigHIy];

    bigD2x1 = kron(D2x1,I);
    bigD2x2 = kron(D2x2,I);
    bigD2y1 = kron(I,D2y1);
    bigD2y2 = kron(I,D2y2);
    
    if boundType==0
        SATx1 = kron(-1*HI*(e0*e0')*BSx1,I);
        SATx2 = kron(-1*HI*(eN*eN')*BSx2,I);
        SATy1 = kron(I,-1*HI*BSy1);
        SATy2 = kron(I,-1*HI*BSy2);
        bigD1 = bigD2x1+SATx1+bigD2y1+SATy1;
        bigD2 = bigD2x2+SATx2+bigD2y2+SATy2;
        bigD = [bigD1 big0; big0 bigD2];
    end

    function S = Neum(t)
        S0 = kron(He0,g0(y,t));
        S1 = kron(HeN,g1(y,t));
        S21 = kron(g21(x1,t),He0);
        S22 = kron(g22(x2,t),He0);
        S31 = kron(g31(x1,t),HeN);
        S32 = kron(g32(x2,t),HeN);
        
        S = [S0+S21-S31; -S1+S22-S32];
    end        
    
    tau = -gamma/(alph*h);
    if boundType==1
        SATx1 =         kron(BSx1'       *(e0*e0'),I);
        SATx1 = SATx1 + kron(tau*b1(xmin)*(e0*e0'),I);
        SATx1 = bigHIx*SATx1;

        SATx2 =         kron(BSx2'       *(eN*eN'),I);
        SATx2 = SATx2 + kron(tau*b2(xmax)*(eN*eN'),I);
        SATx2 = bigHIx*SATx2;
        
        SATy1 =         kron(I,BSy1'       *(e0*e0'));
        SATy1 = SATy1 + kron(I,tau*c1(ymin)*(e0*e0'));
        SATy1 = SATy1 + kron(I,BSy1'       *(eN*eN'));
        SATy1 = SATy1 + kron(I,tau*c1(ymax)*(eN*eN'));
        SATy1 = bigHIy*SATy1;

        SATy2 =         kron(I,BSy2'       *(e0*e0'));
        SATy2 = SATy2 + kron(I,tau*c2(ymin)*(e0*e0'));
        SATy2 = SATy2 + kron(I,BSy2'       *(eN*eN'));
        SATy2 = SATy2 + kron(I,tau*c2(ymax)*(eN*eN'));
        SATy2 = bigHIy*SATy2;
       
        bigD1 = bigD2x1+SATx1+bigD2y1+SATy1;
        bigD2 = bigD2x2+SATx2+bigD2y2+SATy2;
        bigD = [bigD1 big0; big0 bigD2];
    end

    function S = Diri(t)
        xlow  = g0(y,t);
        xhigh = g1(y,t);
        S0x1 = kron(BSx1'       *e0,xlow );
        S1x1 = kron(tau*b1(xmin)*e0,xlow );
        S2x2 = kron(BSx2'       *eN,xhigh);
        S3x2 = kron(tau*b2(xmax)*eN,xhigh);
        
        Sx = bigbigHIx*[S0x1+S1x1; S2x2+S3x2];
        
        ylow1  = g21(x1,t);
        yhigh1 = g31(x1,t);
        S0y1 = kron(ylow1 ,BSy1'       *e0);
        S1y1 = kron(ylow1 ,tau*c1(ymin)*e0);
        S2y1 = kron(yhigh1,BSy1'       *eN);
        S3y1 = kron(yhigh1,tau*c1(ymax)*eN);
        Sy1 = S0y1+S1y1+S2y1+S3y1;
        
        ylow2  = g22(x2,t);
        yhigh2 = g32(x2,t);
        S0y2 = kron(ylow2 ,BSy2'       *e0);
        S1y2 = kron(ylow2 ,tau*c2(ymin)*e0);
        S2y2 = kron(yhigh2,BSy2'       *eN);
        S3y2 = kron(yhigh2,tau*c2(ymax)*eN);
        Sy2 = S0y2+S1y2+S2y2+S3y2;
        
        Sy = bigbigHIy*[Sy1; Sy2];
        S = Sx+Sy;
    end        
    
    %%Insert grid interface
    tau_i   = -1.5*(b1(xmid)+b2(xmid))/(4*alph*h);
    beta_i  = 0.5;
    gamma_i = -0.5;
    
    inter1 =          kron(tau_i  *HI      *eN*[eN'      -e0'     ],I);
    inter1 = inter1 + kron(beta_i *HI*BSx1'*eN*[eN'      -e0'     ],I);
    inter1 = inter1 + kron(gamma_i*HI      *eN*[eN'*BSx1  e0'*BSx2],I);
    
    inter2 =        - kron(tau_i  *HI      *e0*[eN'      -e0'     ],I);
    inter2 = inter2 - kron(beta_i *HI*BSx2'*e0*[eN'      -e0'     ],I);
    inter2 = inter2 + kron(gamma_i*HI      *e0*[eN'*BSx1  e0'*BSx2],I);
    
    bigD = bigD + [inter1; inter2];

    if eigTest
        val = (eig(full(bigD)));
        plot(real(val),imag(val),'*');
        return;
    end
    
    if stepType==0
        bigbig0 = [big0 big0; big0 big0];
        bigI = kron(I,I);
        bigbigI = [bigI big0; big0 bigI];
        bigD = [bigbig0 bigbigI; bigD bigbig0];
        Nl = sparse(bigbigN,1);
    end
    
    function out = prim0(in,t)
        S = Neum(t);
        S = [Nl; S];
        out = bigD*in-S;
    end
    function out = bis0(in,t,dtSq)
        S = Neum(t);
        S_tt = -u_t^2*S;
        out = bigD*(in+dtSq/12*(bigD*in-S))-S-S_tt*dtSq/12;
    end
    function out = prim1(in,t)
        S = Diri(t);
        S = [Nl; S];
        out = bigD*in-S;
    end
    function out = bis1(in,t,dtSq)
        S = Diri(t);
        S_tt = -u_t^2*S;
        out = bigD*(in+dtSq/12*(bigD*in-S))-S-S_tt*dtSq/12;
    end

    prim = 0;
    bis = 0;
    if boundType==0
        prim = @prim0;
    end
    if boundType==1
        prim = @prim1;
    end
    if boundType==0
        bis = @bis0;
    end
    if boundType==1
        bis = @bis1;
    end
    
    %%%%% Looping
    if stepType==0
        [v,mov,movTArr] = primStep(v,dt,M,prim,t,mov,movDt,bigbigN);
    end
    if stepType==1
        [v,mov,movTArr] = bisStep(v,v_prev,dt,M,bis,t,mov,movDt,bigbigN);
    end
    
    %%%%%%% Printing
    if L2Test
        movL2 = zeros(1,movN);
        for ii = 1:movN
            movL2(ii) = L2(mov(:,ii),f([x1; x2],y,movTArr(ii)),h);
        end
        plot(linspace(0,tEnd,movN),movL2);
    end
    
    if movTime && not(L2Test)
        if errTest
            for ii = 1:movN
                mov(:,ii) = mov(:,ii)-f([x1; x2],y,movTArr(ii));
            end
        end
        
        movMax = max(max(mov));
        movMin = min(min(mov));
        x = [x1; x2];
        for ii = 1:movN
            pause(movTime/movN);
            frame = reshape(mov(:,ii),[N+1 2*(N+1)]);
            surf(x,y,frame);
            axis([xmin xmax ymin ymax movMin movMax]);
            caxis([movMin movMax]);
        end
    end
    
    L2norm = L2(v,f([x1; x2],y,tEnd),h);
end